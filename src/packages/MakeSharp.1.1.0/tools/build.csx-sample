/* make# is using scriptcs so you can use #r to reference assemblies and #load to include other scripts */
//#r "[path_to]mycustom.dll"
//#load "other_scripts.csx"

/* to access windows specific helpers */
// #r "[path_to]\packages\MakeSharp[version number]\tools\MakeSharp.Windows.Helpers.dll"
//using MakeSharp.Windows.Helpers;

/* System ; System.IO; MakeSharp; CavemanTools; Nuget namespaces are included by default, you don't need to include them */

/* By default any public class is a task and each task must have a "Run" method with no arguments. A public class ending with _ is considered a poco.
 * You can change the conventions for what type is considered a task 
 * and that method is considered the task entry point with the following code
 */
//Make.Configure
//            .TasksAre(type =>  /* match */)
//            .MethodToExecute(method =>  /* match */);


/* the following helper classes are avaialable: BuildScript, Solution, Project. 
 * Make# scripts are intended to be created with en editor supporting intellisense */

/* For one Solution */
//Solution.FileName="path to name.sln";

/*  For one project */
// Project.StaticName="projectName";


public class cleanUp
{
    public void Run()
    {
       BuildScript.TempDirectory.CleanupDir();
        Solution.Instance.FilePath.MsBuildClean();         
    }
    
}


[Default] //default task. Only one task can be default
//multiple deps: [Depends("Task1","Task2")]
[Depends("cleanUp")] //equivalent to always.DependsOn<cleanUp>
public class build
{
   /* advanced usage*/
    //public build(IConfigureTask cfg)
    //{
    //    cfg.Always.DependOn<cleanUp>();
    //    cfg.When(init=> init.ScriptParams[0]=="something").DontExecute();
    //}

    /* Get context injected to have access to script parameters and a Data object to pass values to the next task */
    //public ITaskContext Context { get; set; }

    public void Run()
    {
        Solution.Instance.FilePath.MsBuildRelease();
        //Context.Data["value"] = "some result";
    }
}


